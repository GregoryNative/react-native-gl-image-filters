{"version":3,"sources":["../../src/filters/Exposure.js"],"names":["Exposure","ShadersFunctions","shaders","Shaders","create","exposure","frag","GLSL","ramp","Lum","ClipColor","SetLum","Sat","SetSat","DefaultValue","t","children","factor"],"mappings":"4gFA0DwBA,Q,yJAvDZC,gB,2ZAENC,SAAUC,iBAAQC,MAAR,CAAe,CAC7BC,SAAU,CACRC,QAAMC,aAAN,kBAQIN,iBAAiBO,IARrB,CASIP,iBAAiBQ,GATrB,CAUIR,iBAAiBS,SAVrB,CAWIT,iBAAiBU,MAXrB,CAYIV,iBAAiBW,GAZrB,CAaIX,iBAAiBY,MAbrB,CADQ,CADmB,CAAf,C,CAmDHC,kCAAe,C,CAEb,QAASd,SAAT,GAA4D,SAAxCK,QAAwC,CAAxCA,CAAwC,YAA7BS,YAA6B,GAALC,CAAK,GAAfC,QAAe,CACzE,MACE,+BAAC,aAAD,EACE,OAAQd,QAAQG,QADlB,CAEE,SAAU,CACRY,OAAQZ,CADA,CAERU,GAFQ,CAFZ,EAQH","file":"Exposure.js","sourcesContent":["import { Shaders, Node, GLSL } from \"gl-react\";\nimport React from \"react\";\n\nimport * as ShadersFunctions from \"../utils/shaders-functions\";\n\nconst shaders = Shaders.create({\n  exposure: {\n    frag: GLSL`\n      precision highp float;\n      varying vec2 uv;\n      float gamma = 0.0;\n      \n      uniform sampler2D t;\n      uniform float factor;\n      \n      ${ShadersFunctions.ramp}\n      ${ShadersFunctions.Lum}\n      ${ShadersFunctions.ClipColor}\n      ${ShadersFunctions.SetLum}\n      ${ShadersFunctions.Sat}\n      ${ShadersFunctions.SetSat}\n            \n      vec3 Exposure(vec3 base, float exposure, float gamma) {\n        float amt = mix(0.009, 0.98, exposure);\n        vec3 res, blend;\n      \n        if (amt < 0.0) {\n          res = mix(vec3(0.0), base, amt + 1.0);\n          blend = mix(base, vec3(0.0), amt + 1.0);\n          res = min(res / (1.0 - blend*0.9), 1.0);\n        } else {\n          res = mix(base, vec3(1.0), amt);\n          blend = mix(vec3(1.0), pow(base, vec3(1.0/0.7)), amt);\n          res = max(1.0 - ((1.0 - res) / blend), 0.0);\n        }\n      \n        return pow(\n          SetLum(SetSat(base, Sat(res)), Lum(res)),\n          vec3(ramp(1.0 - (gamma + 1.0) / 2.0))\n        );\n      }\n\n      void main() {\n        float exposure = factor;\n        vec4 c = texture2D(t, uv);\n        vec3 result = c.rgb;\n        \n        result = Exposure(result, exposure, gamma);\n        result = mix(c.rgb, result, c.a);\n        \n        gl_FragColor = vec4(result, c.a);\n      }\n    `\n  }\n});\n\nexport const DefaultValue = 0;\n\nexport default function Exposure({ exposure = DefaultValue, children: t }) {\n  return (\n    <Node\n      shader={shaders.exposure}\n      uniforms={{\n        factor: exposure,\n        t,\n      }}\n    />\n  )\n}\n"]}