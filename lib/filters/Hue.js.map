{"version":3,"sources":["../../src/filters/Hue.js"],"names":["Hue","shaders","Shaders","create","hue","frag","GLSL","DefaultValue","factor","t","children"],"mappings":"grDA8BwBA,G,iSA3BlBC,SAAUC,iBAAQC,MAAR,CAAe,CAC7BC,IAAK,CACHC,QAAMC,aAAN,kBADG,CADwB,CAAf,C,CAyBHC,kCAAe,C,CAEb,QAASP,IAAT,GAAqD,SAAtCQ,MAAsC,CAAtCA,CAAsC,YAA7BD,YAA6B,GAALE,CAAK,GAAfC,QAAe,CAClE,MACE,+BAAC,aAAD,EACE,OAAQT,QAAQG,GADlB,CAEE,SAAU,CACRA,IAAKI,CADG,CAERC,GAFQ,CAFZ,EAQH","file":"Hue.js","sourcesContent":["import { Shaders, Node, GLSL } from \"gl-react\";\nimport React from \"react\";\n\nconst shaders = Shaders.create({\n  hue: {\n    frag: GLSL`\n      precision highp float;\n      varying vec2 uv;\n      uniform sampler2D t;\n      uniform float hue;\n  \n      const mat3 rgb2yiq = mat3(0.299, 0.587, 0.114, 0.595716, -0.274453, -0.321263, 0.211456, -0.522591, 0.311135);\n      const mat3 yiq2rgb = mat3(1.0, 0.9563, 0.6210, 1.0, -0.2721, -0.6474, 1.0, -1.1070, 1.7046);\n  \n      void main() {\n        vec4 c = texture2D(t, uv);\n        vec3 yColor = rgb2yiq * c.rgb;\n        float originalHue = atan(yColor.b, yColor.g);\n        float finalHue = originalHue + hue;\n        float chroma = sqrt(yColor.b*yColor.b+yColor.g*yColor.g);\n        vec3 yFinalColor = vec3(yColor.r, chroma * cos(finalHue), chroma * sin(finalHue));\n        \n        gl_FragColor = vec4(yiq2rgb * yFinalColor, c.a);\n      }\n    `\n  }\n});\n\nexport const DefaultValue = 0;\n\nexport default function Hue({ factor = DefaultValue, children: t }) {\n  return (\n    <Node\n      shader={shaders.hue}\n      uniforms={{\n        hue: factor,\n        t,\n      }}\n    />\n  )\n}\n"]}