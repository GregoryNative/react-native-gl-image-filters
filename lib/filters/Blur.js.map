{"version":3,"sources":["../../src/filters/Blur.js"],"names":["Blur","shaders","Shaders","create","blur","frag","GLSL","DefaultValue","width","height","factor","children","passes","directionForPass","directionForPassDefault","rec","direction","pass","resolution","t"],"mappings":"szDAkCwBA,I,ibA7BlBC,SAAUC,iBAAQC,MAAR,CAAe,CAC7BC,KAAM,CACJC,QAAMC,aAAN,kBADI,CADuB,CAAf,C,CA2BHC,kCAAe,C,CAEb,QAASP,KAAT,GAOZ,IANDQ,EAMC,GANDA,KAMC,CALDC,CAKC,GALDA,MAKC,KAJDC,MAIC,CAJDA,CAIC,YAJQH,YAIR,GAHDI,CAGC,GAHDA,QAGC,KAFDC,MAEC,CAFDA,CAEC,YAFQ,CAER,OADDC,gBACC,CADDA,CACC,YADkBC,iCAClB,GACKC,EAAM,kBACF,EAAR,IACEJ,CADF,CAGE,8BAAC,aAAD,EACE,OAAQV,QAAQG,IADlB,CAEE,MAAOI,CAFT,CAGE,OAAQC,CAHV,CAIE,SAAU,CACRO,UAAWH,EAAiBI,CAAjB,CAAuBP,CAAvB,CAA+BE,CAA/B,CADH,CAERM,WAAY,CAACV,CAAD,CAAQC,CAAR,CAFJ,CAGRU,EAAGJ,EAAIE,EAAO,CAAX,CAHK,CAJZ,EAJQ,CADX,CAiBD,MAAOF,GAAIH,CAAJ,CACR","file":"Blur.js","sourcesContent":["import { Shaders, Node, GLSL } from \"gl-react\";\nimport React from \"react\";\n\nimport directionForPassDefault from \"../utils/directionForPassDefault\";\n\nconst shaders = Shaders.create({\n  blur: {\n    frag: GLSL`\n      precision highp float;\n      varying vec2 uv;\n      uniform sampler2D t;\n      uniform vec2 direction, resolution;\n\n      vec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.3846153846) * direction;\n        vec2 off2 = vec2(3.2307692308) * direction;\n        color += texture2D(image, uv) * 0.2270270270;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\n        color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\n        color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\n        return color;\n      }\n\n      void main () {\n        gl_FragColor = blur9(t, uv, resolution, direction);\n      }\n    `\n  }\n});\n\nexport const DefaultValue = 0;\n\nexport default function Blur({\n  width,\n  height,\n  factor = DefaultValue,\n  children,\n  passes = 2,\n  directionForPass = directionForPassDefault\n}) {\n  const rec = pass =>\n    pass <= 0 ? (\n      children\n    ) : (\n      <Node\n        shader={shaders.blur}\n        width={width}\n        height={height}\n        uniforms={{\n          direction: directionForPass(pass, factor, passes),\n          resolution: [width, height],\n          t: rec(pass - 1)\n        }}\n      />\n    );\n\n  return rec(passes);\n}\n"]}